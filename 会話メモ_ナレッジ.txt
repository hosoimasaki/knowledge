■Java（コンパイル型オブジェクト指向）
Javaはあらゆる場面で使われている、汎用性が高いプログラミング言語です。
OSに依存しないクロスプラットフォームであるという特徴があるため、
Windowsやandroid、Linuxなど、さまざまなOS上で開発することが可能です。
そのため、応用できるシステムは多岐にわたります。

例えば、Webサイトの掲示板などのWeb系システムや、PCにインストールして使うソフトウェア、
家電などに組み込まれている組み込み系システムなど、ありとあらゆる分野で開発に使用することが可能です。
また、その高い安定性から、大規模な銀行システムや商用のデータベースにも用いられており、幅広い分野で応用されていることが分かります。

<Javaでできること>
・Web・PC・スマホなどのアプリケーション開発
・Webサイトの作成
・ソフトウェア開発
・家電などの組み込みシステム開発
・金融機関の基幹システム開発


■C言語（コンパイル型)
C言語はその汎用性の高さから、アマチュアからプロのエンジニアにまで利用されます。
C言語は元々、UNIXと呼ばれるコンピューターのOSを移植しやすくする目的で作られた言語で、
メモリ領域の管理や、ポインター演算、ビット毎の論理演算など、ハードウェアに密着した処理がしやすいのが特徴です。
しかし、後述する組み込みソフトやスマホのアプリケーション、ゲーム開発といったソフトウェア開発の分野においても、
C言語は利用されています。何にでも対応できる自由度の高さこそが、古くからエンジニアの間でC言語が使用され続けている理由のひとつです。

<使用例>
車(ECU)、L2やL3のスイッチ、交換機、ロボット、OS、電化製品等


■C++言語（コンパイル型オブジェクト指向）
C++は、C言語の開発から約10年後の1983年に作られたプログラム言語です。「シープラスプラス」と読みますが、
日本国内においては縮めて「シープラ」と呼ばれることもあります。C言語と同じく、OSやメモリといったハードウェアを制御できるプログラム言語で、
C言語の機能を拡張し「オブジェクト指向」という概念を取り入れる形で作られています。C言語と互換性があり、C言語とC++を併用することで、
開発効率の優れたプログラムを作成することが可能です。ハードウェアの制御に適しているため、C++は工業機械や電子基板、OSなどの開発に向いています。

しかし、C++ではC言語の知識が必須になるだけでなく、オブジェクト指向の概念やコンピュータの仕組みといったさまざまなスキルが求められるため、
ほかの言語に比べて難易度が高くなります。そのため、まずはC言語やコンピュータについて学び、次にオブジェクト指向、最後にC++というように、
段階を追って学習する必要があります。

<使用例>
電話機やアプリケーション開発、汎用工業機器、C言語の使用例等


■C#（コンパイル型オブジェクト指向）
C#とは、マイクロソフトによって開発されたプログラミング言語です。C++にJAVAというプログラミング言語の概念を踏襲する形で作られています。
C♯は、C++のようにC言語との互換性はなく、まったく別のプログラミング言語と言えるでしょう。C言語やC++のように、
ハードウェアの制御には適していないものの、C♯は開発元がマイクロソフトであることから、Windowsアプリケーションなどのソフトウェア開発や、
WEBアプリ開発に向いているプログラミング言語です。検索エンジンの「Bing」や、Microsoft社の公式サイトは、実際にC#を使って開発されています。
C++やC#も、名前にCが入っているという点は一緒ですが、特徴や用途に関しては大きく異なります。

<使用例>
Windowsアプリケーション


■HTML、CSS、JavaScript（インタープリタ型）
参考URL：https://www.nomad-creator.com/blog/2019/11/webhtmlcssjavascript.html
<HTML>
HTMLとは、Hyper Text Markup Language（ハイパーテキスト・マークアップ・ランゲージ）の略です。
マークアップランゲージ、つまり、マークアップ言語とは、文章を構造化するための言語のことを言います。

マークアップ言語にはHTML以外にも、XMLなど、いろいろな種類がありますが、WEBサイトを形作る最も基本的なマークアップ言語といえばこれです。
HTMLは、タグと呼ばれる<>で囲まれた記号を使って文章の構造を示します。例えば、ここでは、下記のタグを使用しています。
<h2></h2>	見出し
<p></p>	文章の段落
<br>	改行
<a></a>	リンク

<CSS>
CSSとは、Cascading Style Sheet（カスケ―ディング・スタイル・シート）の略です。文書のスタイルを指定する技術をスタイルシートと言い、
HTMLなどで作成されたWEBページにスタイルを適用する場合に、CSSを使います。
文字のレイアウトや大きさ、色などを定義でき、HTMLと連携させることが出来ます。


<JavaScript>
JavaScriptとは、簡単に言うとWEBページに動きをつけるプログラミング言語です。JavaScriptを使うことによって、
ユーザーのアクションに応じたコンテンツを表示することができます。

ちなみに、よくJavaScriptと混同されがちなのがJavaです。JavaScriptは開発当初、LiveScriptという名前でしたが、
当時人気だったプログラミング言語のJavaにあやかって「JavaScript」という名前に変更されました。名前は似ていますが、
この二つは全く別の言語です。


■Python（インタープリタ型）
Pythonとは1991年にオランダ人のグイド・ヴァンロッサムというプログラマーによって開発され、オープンソースで運営されているプログラミング言語です。
イギリスBBCのコメディ番組『空飛ぶモンティ・パイソン』がPythonという名前の由来であるようです。一括りにPythonといってもその用途は様々で、
組み込み開発や、Webアプリケーション、デスクトップアプリケーション、さらには人工知能開発、ビッグデータ解析などと多岐に渡ります。

Pythonのプログラミング言語としての主な特徴は、少ないコードで簡潔にプログラムを書けること、専門的なライブラリが豊富にあることなどが挙げられます。

そもそもPythonは、コードを書きやすく読みやすくするために生まれたプログラミン言語のため、だれが書いても同じようなコードになるようになっています。
Pythonのプログラミングが簡単な理由の一つに「オフサイドルール」初稿というコードの書き方の規則があります。「オフサイドルール」初稿とは
行頭をインデント（字下げ）することによって文の塊を指定するというプログラミング言語の規則です。開発の現場において、
ほかの人が書いたコードを読めるということはとても重要なことなのです。

また、Pythonは開発に役立つプログラムをまとめたものである「ライブラリ」の数が、数万に上ります。こうした既存のライブラリを有効に活用することで、
自分の作りたいプログラムを作成することが容易にできるのです。

<Pythonで出来ること>
1. 機械学習を使った人工知能の開発
2. 自動データ処理や分析などの業務効率化
3. スクレイピングによるWEB上の画像データ・テキストデータの自動収集
4. WEBサービス・WEBアプリケーション制作
5. スマホアプリ（Android）制作
6. デスクトップアプリ制作
7. 組み込みアプリケーション制作
8. フィンテック・ブロックチェーン技術の開発


【その他】
■コンパイル型
プログラムの実行前に全体を翻訳して、実行速度を速くする方式のことを「コンパイル型」といいます。
プログラムを完成させて実行する必要がある分、万が一不具合があってもすぐに確認できないという欠点はありますが、
C言語、C++、C#、Java、Swift等はこのコンパイル方式を使用しているため、プログラムを高速で動作させることができるのです。


■インタープリタ型
C言語などのコンパイル型の特徴として挙げられるのは、プログラミングの実行速度が速いという点です。
人間によって入力されたプログラムは、あくまで人間にしか理解できず、
そのままでは動作しません。そこで、プログラムをコンピューターが理解できる言葉（機械語）に翻訳する必要があるわけですが、プログラムを実行しながら
翻訳を行うと、同時に処理を行うために実行速度が低下してしまうのです。
この、プログラムを実行しながら翻訳を行う方式を「インタープリタ型」といい、BASICやPerl、Python、VBなどのプログラミング言語で使用されています。


■WindowsServer
１．Windowsサーバーの概要
そもそもサーバーの役割とは何でしょう？

データベース、アカウント制御、ウェブサーバー、メールサーバー、プリントサーバー、役割を列挙するときりがありません。
少し乱暴な言い方をすると、スタンドアローン(ネットワークに接続されていないPCのこと)ではできないことで、
ネットワークにつないで初めてできる機能はすべてサーバーの役割です。

役割によってはクライアントと同じOSでも処理しきれますが、複数のユーザーが同時にアクセスするサーバーでは専用のOSが必要です。

Microsoftから発売されているサーバー専用OSがWindowsサーバーです。Windowsサーバーでは、一般的なサーバー機能に加えて、
マイクロソフトによって開発されたユーザーとコンピュータを管理する仕組み（Active Directory）を構築することができます。

２．サーバーでの操作
Windowsサーバーは「GUI使用サーバー」か「Server Core インストール」を選択してインストールされます。
初期設定では「Server Core インストール」となっています。

この設定はいつでも変更できますが、初期設定ではGUI（Graphical User Interface）ツールが利用できたほうが便利ですので、
「Server Core インストール」で運用するにしても、初期設定が済むまでは「GUI使用サーバー」を選択することをお勧めします。

Windowsサーバーでの操作はGUIベースの「サーバーマネージャー」と、コマンドラインでの「WindowsPowerShell」で行います。
サーバーの初期構成や、基本的な管理は「サーバーマネージャー」で、詳細な管理は「WindowsPowerShell」を利用します。

Windowsサーバーに管理者としてログインすると「サーバーマネージャー」が立ち上がります。「サーバーマネージャー」では
ネットワーク上にある他のサーバーも管理することが可能です。



■Linuxディストリビューション
本来、Linuxという言葉はLinuxカーネルのことを意味していますが、カーネルだけではOSとして手軽に使うことはできません。
そこで、Linuxを利用しやすいようにアプリケーションなどをパッケージにしてすぐに使える状態にしたものを
「ディストリビューション」と呼びます。

ディストリビューションを大きく分けると4種類の系統に分かれていて、RHELのみ有償、他は基本的に無償になります。
<ご参考>
https://liginc.co.jp/409986
https://eng-entrance.com/linux_beginner_distribution

※系統で大きく異なるのはパッケージ管理と呼ばれる、ソフトやOSを更新する際のコマンドが違う点があります。
  その他は見た目やアプリケーションの差異、導入難易度はあれど、あまり大きな差はありません。

--
Redhat系（パッケージ管理コマンド：yum（ヤム） or rpm（アールピーエム）
 - Red Hat Enterprise Linux (RHEL) ・・・レル ※有償
 - CentOS・・・セントオーエス  →RHELのクローン版(クローンなのに無償で使える)
 - Fedora・・・フェドラ        →RHELの先行開発版

Debian系（パッケージ管理コマンド：apt（アプト））
 - Debian・・・デビアン  →初心者でも使いやすい
 - Ubuntu・・・ウブンツ  →初心者でも使いやすい
 - Linux Mint・・・リナックスミント →初心者でも使いやすい

Slackware系
 - openSUSE・・・（オープンスーゼ）→コアな技術者向け （パッケージ管理コマンド：Zypper（ジッパー））

その他系
 - Gentoo Linux(ジェンツー・リナックス)→コアな技術者向け （パッケージ管理コマンド：Portage（ポーテージ））
 - Arch Linux（アーチ・リナックス）→コアな技術者向け     （パッケージ管理コマンド：pacman（パックマン））
 
 